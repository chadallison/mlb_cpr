scale_color_manual(values = team_color_codes) +
scale_x_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
labs(x = "Season Win Percentage", y = paste0(this_month, " Win Percentage"),
title = "Scatterplot of Overall and Monthly Win Percentages",
subtitle = "Teams above dashed line are doing better this month")
get_runs_scored = function(team) {
home = end_games |> filter(home_team == team) |> pull(home_score) |> sum()
away = end_games |> filter(away_team == team) |> pull(away_score) |> sum()
return(home + away)
}
get_runs_allowed = function(team) {
home = end_games |> filter(home_team == team) |> pull(away_score) |> sum()
away = end_games |> filter(away_team == team) |> pull(home_score) |> sum()
return(home + away)
}
scored_allowed_df = data.frame(team = all_teams) |>
mutate(scored = sapply(team, get_runs_scored),
allowed = sapply(team, get_runs_allowed),
diff = scored - allowed)
scored_allowed_df |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
mutate(diff_pct = round(diff / scored, 3)) |>
ggplot(aes(diff_pct, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5, max.overlaps = 30) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
geom_hline(aes(yintercept = 0.5), alpha = 0.1) +
geom_vline(aes(xintercept = 0), alpha = 0.1) +
scale_x_continuous(breaks = seq(-5, 5, by = 0.1), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent) +
labs(x = "Run Differential as Percentage of Runs Scored", y = "Win Percentage",
title = "Win Percentage v. Run Differential as Percent of Runs Scored",
subtitle = "Teams above dashed line have a better record than they 'should'")
# runs scored in wins and losses + runs allowed in wins and losses
end_wl = end_games |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
win_score = ifelse(home_score > away_score, home_score, away_score),
lose_team = ifelse(home_score > away_score, away_team, home_team),
lose_score = ifelse(home_score > away_score, away_score, home_score))
# function to find games played
get_games_played = function(team) {
return(end_wl |>
filter(home_team == team | away_team == team) |>
nrow())
}
# function to find runs scored in wins
get_win_scored = function(team) {
return(end_wl |>
filter(win_team == team) |>
pull(win_score) |>
sum() / get_games_played(team))
}
# function to find runs allowed in wins
get_win_allowed = function(team) {
return(end_wl |>
filter(win_team == team) |>
pull(lose_score) |>
sum() / get_games_played(team))
}
# function to find runs scored in losses
get_loss_scored = function(team) {
return(end_wl |>
filter(lose_team == team) |>
pull(lose_score) |>
sum() / get_games_played(team))
}
# function to find runs allowed in losses
get_loss_allowed = function(team) {
return(end_wl |>
filter(lose_team == team) |>
pull(win_score) |>
sum() / get_games_played(team))
}
wl_sa = data.frame(team = all_teams) |>
mutate(win_scored = sapply(team, get_win_scored),
win_allowed = sapply(team, get_win_allowed),
loss_scored = sapply(team, get_loss_scored),
loss_allowed = sapply(team, get_loss_allowed)) |>
mutate_if(is.numeric, ~round(., 3))
wl_sa |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(win_scored, loss_scored)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_color_codes) +
labs(x = "Avg. Runs Scored in Wins", y = "Avg. Runs Scored in Losses",
title = "Scatterplot of Runs Scored in Wins v. Losses",
subtitle = "Teams above dashed line are scoring above-average runs in losses") +
scale_x_continuous(breaks = seq(0, 10, by = 0.25)) +
scale_y_continuous(breaks = seq(0, 5, by = 0.25))
all_homers = read_csv("all_game_hrs.csv", col_types = cols())
# all_homers = data.frame(game_pk = NULL, team = NULL, hrs = NULL)
get_game_hrs = function(pk) {
return(mlb_pbp(pk) |>
filter(!is.na(hitData.hardness) & result.event == "Home Run") |>
group_by(game_pk, team = batting_team) |>
summarise(hrs = n(),
.groups = "drop"))
}
pk_list = all_game_pks |>
filter(date < Sys.Date() & !game_pk %in% bad_pks & !game_pk %in% all_homers$game_pk) |>
pull(game_pk)
if (length(pk_list) > 0) {
for (i in 1:length(pk_list)) {
homers = get_game_hrs(pk_list[i])
if (nrow(homers) == 0) homers = data.frame(game_pk = pk_list[i], team = "Chicago Cubs", hrs = 0)
all_homers = rbind(all_homers, homers)
# if (i %% 10 == 0) print(i)
}
}
write_csv(all_homers, "all_game_hrs.csv")
cor_df = all_homers |>
group_by(team) |>
summarise(hrs = sum(hrs)) |>
inner_join(team_records, by = "team") |>
select(team, hrs, win_pct)
cor_lab = round(cor(cor_df$hrs, cor_df$win_pct), 3)
all_homers |>
group_by(team) |>
summarise(hrs = sum(hrs)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(hrs, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5, max.overlaps = 30) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
geom_hline(aes(yintercept = 0.5), alpha = 0.1) +
labs(x = "Home Runs", y = "Win Percentage",
title = "Win Percentage by Number of Home Runs",
subtitle = paste0("Correlation: ", cor_lab)) +
scale_x_continuous(breaks = seq(0, 500, by = 10)) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent)
all_ks = read_csv("all_game_ks.csv", col_types = cols())
# all_ks = data.frame(game_pk = NULL, team = NULL, ks = NULL)
get_game_ks = function(pk) {
return(mlb_pbp(pk) |>
filter(result.event == "Strikeout" & details.isOut) |>
group_by(game_pk, team = batting_team) |>
summarise(ks = n(),
.groups = "drop"))
}
pk_list = all_game_pks |>
filter(date < Sys.Date() & !game_pk %in% bad_pks & !game_pk %in% all_ks$game_pk) |>
pull(game_pk)
if (length(pk_list) > 0) {
for (i in 1:length(pk_list)) {
ks = get_game_ks(pk_list[i])
if (nrow(ks) == 0) ks = data.frame(game_pk = pk_list[i], team = "Chicago Cubs", ks = 0)
all_ks = rbind(all_ks, ks)
if (i %% 25 == 0) print(i)
}
}
write_csv(all_ks, "all_game_ks.csv")
cor_df = all_ks |>
group_by(team) |>
summarise(ks = sum(ks)) |>
inner_join(team_records |>
select(team, win_pct), by = "team")
cor_lab = round(cor(cor_df$ks, cor_df$win_pct), 3)
all_ks |>
group_by(team) |>
summarise(ks = sum(ks)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(ks, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
labs(x = "Strikeouts", y = "Win Percentage",
title = "Scatterplot of Strikeouts and Win Percentage by Team",
subtitle = paste0("Correlation ", cor_lab)) +
scale_x_continuous(breaks = seq(0, 2500, by = 25)) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05), labels = scales::percent)
cor_df = all_ks |>
group_by(team) |>
summarise(ks = sum(ks)) |>
inner_join(all_homers |>
group_by(team) |>
summarise(hrs = sum(hrs)), by = "team")
cor_lab = round(cor(cor_df$ks, cor_df$hrs), 3)
all_ks |>
group_by(team) |>
summarise(ks = sum(ks)) |>
inner_join(all_homers |>
group_by(team) |>
summarise(hrs = sum(hrs)), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(hrs, ks)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
labs(x = "Home Runs", y = "Strikeouts",
title = "Scatterplot of Home Runs and Strikeouts by Team",
subtitle = paste0("Correlation: ", cor_lab)) +
scale_x_continuous(breaks = seq(0, 500, by = 10)) +
scale_y_continuous(breaks = seq(0, 2500, by = 50))
get_team_wl_homers = function(f_team) {
team_homers = all_homers |>
filter(team == f_team) |>
select(-team)
win_homers = all_game_pks |>
inner_join(end_games, by = c("date", "away_team", "home_team")) |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team)) |>
filter(win_team == f_team) |>
left_join(team_homers, by = "game_pk") |>
summarise(homers = sum(hrs, na.rm = T),
n = n())
loss_homers = all_game_pks |>
inner_join(end_games, by = c("date", "away_team", "home_team")) |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team)) |>
filter(lose_team == f_team) |>
left_join(team_homers, by = "game_pk") |>
summarise(homers = sum(hrs, na.rm = T),
n = n())
win_hr = round(win_homers$homers / win_homers$n, 3)
loss_hr = round(loss_homers$homers / loss_homers$n, 3)
return(data.frame(team = f_team, win_hr = win_hr, loss_hr = loss_hr))
}
team_wl_homers = data.frame(team = NULL, win_hr = NULL, loss_hr = NULL)
for (i in 1:length(all_teams)) {
team_wl_homers = rbind(team_wl_homers, get_team_wl_homers(all_teams[i]))
}
cor_lab = round(cor(team_wl_homers$win_hr, team_wl_homers$loss_hr), 3)
team_wl_homers |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(win_hr, loss_hr)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
labs(x = "Average HRs in Wins", y = "Average HRs in Losses",
title = "Scatterplot of Average HRs in Wins and Losses by Team",
subtitle = paste0("Correlation: ", cor_lab)) +
scale_x_continuous(breaks = seq(0, 5, by = 0.1)) +
scale_y_continuous(breaks = seq(0, 5, by = 0.1))
mlb_pbp(324566)
mlb_pbp(324566) |>
filter(details.isInPlay)
mlb_pbp(324532) |>
filter(details.isInPlay)
mlb_pbp(324532) |>
filter(details.isInPlay) |>
count(result.event)
mlb_pbp(323532) |>
filter(details.isInPlay) |>
count(result.event)
mlb_pbp(323532) |>
filter(details.isInPlay & result.event == "Home Run")
all_game_pks
all_game_pks |>
filter(date <= Sys.Date() - 1)
all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks)
all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
loop_pks = all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
mlb_pbp(sample(loop_pks, 1)) |>
filter(details.isInPlay & result.event == "Home Run")
mlb_pbp(sample(loop_pks, 1)) |>
filter(details.isInPlay & result.event == "Home Run")
mlb_pbp(sample(loop_pks, 1)) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(matchup.batter.fullName, batting_team)
loop_pks = all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
player_hrs_df = data.frame()
for (i in 1:10) {
# for (i in 1:length(loop_pks)) {
loop_data = mlb_pbp(loop_pks[i]) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(matchup.batter.fullName, batting_team)
if (nrow(loop_data) > 0) player_hrs_df = rbind(player_hrs_df, loop_data)
}
player_hrs_df
player_hrs_df |>
setNames(c("hitter_name", "hitter_team", n))
player_hrs_df |>
setNames(c("hitter_name", "hitter_team", "hrs"))
loop_pks = all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
player_hrs_df = data.frame()
for (i in 1:100) {
# for (i in 1:length(loop_pks)) {
loop_data = mlb_pbp(loop_pks[i]) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(matchup.batter.fullName, batting_team)
if (nrow(loop_data) > 0) player_hrs_df = rbind(player_hrs_df, loop_data)
}
player_hrs_df |>
setNames(c("hitter_name", "hitter_team", "hrs"))
loop_pks = all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
player_hrs_df = data.frame()
for (i in 1:100) {
# for (i in 1:length(loop_pks)) {
loop_data = mlb_pbp(loop_pks[i]) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(matchup.batter.fullName, batting_team) |>
setNames(c("hitter_name", "hitter_team", "hrs"))
if (nrow(loop_data) > 0) player_hrs_df = rbind(player_hrs_df, loop_data)
}
player_hrs_df
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs)) |>
arrange(desc(hrs))
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs)) |>
arrange(desc(hrs),
.groups = "drop")
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs))
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs))
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs))
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs)) |>
count(hitter_name)
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs)) |>
count(hitter_name) |>
arrange(desc(n))
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs))
progressr::with_progress(
for (i in 1:1000000000) {
if (i %% 1000 == 0) {
print(paste0(i, " is cool!"))
}
}
)
progressr::with_progress(
for (i in 1:1000000) {
if (i %% 1000 == 0) {
print(paste0(i, " is cool!"))
}
}
)
progressr::with_progress(
for (i in 1:1000000) {
if (i %% 10000 == 0) {
print(paste0(i, " is cool!"))
}
}
)
progressr::with_progress(
for (i in 1:1000000) {
if (i %% 100000 == 0) {
print(paste0(i, " is cool!"))
}
}
)
length(loop_pks)
loop_pks = all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
player_hrs_df = data.frame()
for (i in 1:500) {
# for (i in 1:length(loop_pks)) {
loop_data = mlb_pbp(loop_pks[i]) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(matchup.batter.fullName, batting_team) |>
setNames(c("hitter_name", "hitter_team", "hrs"))
if (nrow(loop_data) > 0) player_hrs_df = rbind(player_hrs_df, loop_data)
}
# note that this could have duplicates if a player has hit hrs with multiple teams this season
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs))
# note that this could have duplicates if a player has hit hrs with multiple teams this season
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs))
loop_pks = all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
player_hrs_df = data.frame()
for (i in 1:5) {
# for (i in 1:length(loop_pks)) {
loop_data = mlb_pbp(loop_pks[i]) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(game_pk, matchup.batter.fullName, batting_team) |>
setNames(c("game_pk", "hitter_name", "hitter_team", "hrs"))
if (nrow(loop_data) > 0) player_hrs_df = rbind(player_hrs_df, loop_data)
}
for (i in 1:5) {
# for (i in 1:length(loop_pks)) {
loop_data = mlb_pbp(loop_pks[i]) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(game_pk, matchup.batter.fullName, batting_team) |>
setNames(c("game_pk", "hitter_name", "hitter_team", "hrs"))
if (nrow(loop_data) > 0) player_hrs_df = rbind(player_hrs_df, loop_data)
}
# note that this could have duplicates if a player has hit hrs with multiple teams this season
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs))
loop_pks = all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
player_hrs_df = data.frame()
for (i in 1:2) {
# for (i in 1:length(loop_pks)) {
loop_data = mlb_pbp(loop_pks[i]) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(game_pk, matchup.batter.fullName, batting_team) |>
setNames(c("game_pk", "hitter_name", "hitter_team", "hrs"))
if (nrow(loop_data) > 0) player_hrs_df = rbind(player_hrs_df, loop_data)
}
# note that this could have duplicates if a player has hit hrs with multiple teams this season
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs))
loop_pks = all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
player_hrs_df = data.frame()
for (i in 1:1) {
# for (i in 1:length(loop_pks)) {
loop_data = mlb_pbp(loop_pks[i]) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(game_pk, matchup.batter.fullName, batting_team) |>
setNames(c("game_pk", "hitter_name", "hitter_team", "hrs"))
if (nrow(loop_data) > 0) player_hrs_df = rbind(player_hrs_df, loop_data)
}
# note that this could have duplicates if a player has hit hrs with multiple teams this season
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs))
loop_pks = all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
player_hrs_df = data.frame()
for (i in 1:3) {
# for (i in 1:length(loop_pks)) {
loop_data = mlb_pbp(loop_pks[i]) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(game_pk, matchup.batter.fullName, batting_team) |>
setNames(c("game_pk", "hitter_name", "hitter_team", "hrs"))
if (nrow(loop_data) > 0) player_hrs_df = rbind(player_hrs_df, loop_data)
}
# note that this could have duplicates if a player has hit hrs with multiple teams this season
player_hrs_df |>
group_by(hitter_name, hitter_team) |>
summarise(hrs = sum(hrs),
.groups = "drop") |>
arrange(desc(hrs))
player_hrs_df
loop_pks = all_game_pks |>
filter(date <= Sys.Date() - 1 & !game_pk %in% bad_pks) |>
pull(game_pk)
player_hrs_df = data.frame()
for (i in 1:500) {
# for (i in 1:length(loop_pks)) {
loop_data = mlb_pbp(loop_pks[i]) |>
filter(details.isInPlay & result.event == "Home Run") |>
count(game_pk, matchup.batter.fullName, batting_team) |>
setNames(c("game_pk", "hitter_name", "hitter_team", "hrs"))
if (nrow(loop_data) > 0) player_hrs_df = rbind(player_hrs_df, loop_data)
}
player_hrs_df
setwd("~/r_projects/mlb_cpr")
write_csv(player_hrs_df, "player_hrs.csv")
player_hrs_df = read_csv("player_hrs.csv", col_types = cols())
