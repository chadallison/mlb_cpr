return(round(mean(c(home_cpr, away_cpr)), 3))
}
team_cpr = data.frame(team = all_teams) |>
mutate(off_cpr = sapply(team, get_off_cpr),
def_cpr = sapply(team, get_def_cpr),
total_cpr = off_cpr + def_cpr)
day_label = paste(day(Sys.Date()), month(Sys.Date(), label = T, abbr = F)[1], year(Sys.Date()))
team_cpr |>
mutate(pos_lab = ifelse(total_cpr > 0, round(total_cpr, 3), ""),
neg_lab = ifelse(total_cpr < 0, round(total_cpr, 3), "")) |>
ggplot(aes(reorder(team, total_cpr), total_cpr)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = pos_lab), size = 2.5, hjust = -0.25) +
geom_text(aes(label = neg_lab), size = 2.5, hjust = 1.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(-1.75, 1.75)) +
labs(x = NULL, y = "Composite Performance Rating", title = paste0("MLB CPR Rankings as of ", day_label))
end_wl = end_games |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team))
team_wins = end_wl |>
count(win_team) |>
rename(team = win_team, wins = n)
team_losses = end_wl |>
count(lose_team) |>
rename(team = lose_team, losses = n)
team_records = team_wins |>
left_join(team_losses, by = "team") |>
mutate(win_pct = round(wins / (wins + losses), 3),
record = paste0(wins, "-", losses))
team_records |>
select(team, win_pct) |>
left_join(team_cpr, by = "team") |>
select(team, win_pct, total_cpr) |>
mutate(record_rank = rank(-win_pct, ties.method = "average"),
cpr_rank = rank(-total_cpr, ties.method = "average"),
xxx = case_when(cpr_rank > record_rank ~ "Not as Good as Record",
cpr_rank < record_rank ~ "Better Than Record",
cpr_rank == record_rank ~ "Accurate Record")) |>
ggplot(aes(cpr_rank, record_rank)) +
geom_point(aes(col = xxx), size = 3) +
geom_abline(linetype = "dashed", alpha = 0.5) +
ggrepel::geom_text_repel(aes(label = team), size = 3, alpha = 0.25) +
scale_color_manual(values = c("black", "springgreen4", "indianred3")) +
labs(x = "CPR Rank", y = "Record Rank", col = NULL,
title = "2023 MLB Records x CPR Ranks")
gami_df = end_games |>
transmute(date, win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team),
win_score = ifelse(home_score > away_score, home_score, away_score),
lose_score = ifelse(home_score > away_score, away_score, home_score))
score_counts = gami_df |>
mutate(win_score = factor(win_score),
lose_score = factor(lose_score)) |>
count(win_score, lose_score) |>
mutate(final_score = paste0(win_score, "-", lose_score))
most_recent = gami_df |>
mutate(win_score = factor(win_score),
lose_score = factor(lose_score)) |>
left_join(score_counts, by = c("win_score", "lose_score")) |>
filter(n == 1) |>
slice_max(date, n = 1)
# THE MOST RECENT DATA ABOVE HAS THE GAME BY GAME DATA
last_gami = paste0("Last Scorigami: ", most_recent$win_team, " def. ", most_recent$lose_team, " ",
most_recent$win_score, "-", most_recent$lose_score, " on ", most_recent$date)
yesterday_gami = gami_df |>
mutate(win_score = factor(win_score),
lose_score = factor(lose_score)) |>
left_join(score_counts, by = c("win_score", "lose_score")) |>
filter(n == 1 & date == Sys.Date() - 1) |>
nrow()
yesterday_text = case_when(yesterday_gami == 0 ~ "No Scorigami Yesterday :(",
yesterday_gami == 1 ~ "One Scorigami Yesterday :)",
yesterday_gami > 1 ~ paste0(yesterday_gami, " Scorigamis Yesterday :)"))
gami_df |>
mutate(win_score = factor(win_score),
lose_score = factor(lose_score),
final_score = paste0(win_score, "-", lose_score)) |>
left_join(score_counts, by = c("win_score", "lose_score", "final_score")) |>
mutate(win_score = as.numeric(as.character(win_score)),
lose_score = as.numeric(as.character(lose_score))) |>
distinct(win_score, lose_score, n) |>
ggplot(aes(win_score, lose_score)) +
geom_point(shape = "square", size = 7, aes(col = n), show.legend = F) +
geom_text(aes(label = n), size = 3) +
scale_color_gradient(high = "#5B7E54", low = "#97BA90") +
scale_x_continuous(breaks = 0:30) +
scale_y_continuous(breaks = 0:30) +
labs(x = "Winning Score", y = "Losing Score", subtitle = last_gami,
title = paste0("2023 MLB Scorigami: ", yesterday_text))
# all_retro_teams = get_retrosheet(type = "game", year = 2022) |>
#   pull(HmTm) |> unique() |> sort()
#
# retro_abbr_matches = data.frame(all_retro_teams) |>
#   mutate(new_team = c("LAA", "ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL",
#                       "DET", "HOU", "KC", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK",
#                       "PHI", "PIT", "SD", "SEA", "SF", "STL", "TB", "TEX", "TOR", "WAS"))
# big_ole_results = data.frame(year = NULL, win_score = NULL, lose_score = NULL)
#
# for (i in 1901:2022) {
#   fdf = get_retrosheet(type = "game", year = i) |>
#     select(HmRuns, VisRuns) |>
#     transmute(year = i, win_score = ifelse(HmRuns > VisRuns, HmRuns, VisRuns),
#               lose_score = ifelse(HmRuns > VisRuns, VisRuns, HmRuns))
#
#   big_ole_results = rbind(big_ole_results, fdf)
# }
big_ole_results = read_csv("historic_results.csv", col_types = cols())
this_year_res = end_games |>
transmute(year = 2023, win_score = ifelse(home_score > away_score, home_score, away_score),
lose_score = ifelse(home_score > away_score, away_score, home_score))
big_ole_results = rbind(big_ole_results, this_year_res)
big_ole_results |>
count(win_score, lose_score) |>
arrange(desc(n)) |>
ggplot(aes(win_score, lose_score)) +
geom_point(shape = "square", size = 4, aes(col = n), show.legend = F) +
scale_color_gradient(high = "#5B7E54", low = "#97BA90") +
scale_x_continuous(breaks = 0:50) + scale_y_continuous(breaks = 0:50) +
labs(x = "Winning Score", y = "Losing Score", title = "Historic MLB Scorigami (Since 1901)")
wbt_df = end_games |>
mutate(home_win = ifelse(home_score > away_score, 1, 0),
home_wb2 = ifelse(home_score > away_score + 1, 1, 0),
home_wb3 = ifelse(home_score > away_score + 2, 1, 0),
home_wb4 = ifelse(home_score > away_score + 3, 1, 0),
home_wb5 = ifelse(home_score > away_score + 4, 1, 0),
away_win = ifelse(away_score > home_score, 1, 0),
away_wb2 = ifelse(away_score > home_score + 1, 1, 0),
away_wb3 = ifelse(away_score > home_score + 2, 1, 0),
away_wb4 = ifelse(away_score > home_score + 3, 1, 0),
away_wb5 = ifelse(away_score > home_score + 4, 1, 0))
get_wb2_rate = function(team) {
home_wb2 = wbt_df |> filter(home_team == team) |> pull(home_wb2)
away_wb2 = wbt_df |> filter(away_team == team) |> pull(away_wb2)
return(round(mean(c(home_wb2, away_wb2)), 3))
}
get_wb3_rate = function(team) {
home_wb3 = wbt_df |> filter(home_team == team) |> pull(home_wb3)
away_wb3 = wbt_df |> filter(away_team == team) |> pull(away_wb3)
return(round(mean(c(home_wb3, away_wb3)), 3))
}
get_wb4_rate = function(team) {
home_wb4 = wbt_df |> filter(home_team == team) |> pull(home_wb4)
away_wb4 = wbt_df |> filter(away_team == team) |> pull(away_wb4)
return(round(mean(c(home_wb4, away_wb4)), 3))
}
get_wb5_rate = function(team) {
home_wb5 = wbt_df |> filter(home_team == team) |> pull(home_wb5)
away_wb5 = wbt_df |> filter(away_team == team) |> pull(away_wb5)
return(round(mean(c(home_wb5, away_wb5)), 3))
}
best_record_teams = team_records |>
slice_max(win_pct, n = 3, with_ties = F) |>
pull(team)
team_wbt = data.frame(team = best_record_teams) |>
left_join(select(team_records, team, win_pct), by = "team") |>
mutate(wb2 = sapply(team, get_wb2_rate),
wb3 = sapply(team, get_wb3_rate),
wb4 = sapply(team, get_wb4_rate),
wb5 = sapply(team, get_wb5_rate))
vis_df = team_wbt |>
pivot_longer(cols = !team, names_to = "metric", values_to = "value") |>
mutate(metric = case_when(metric == "win_pct" ~ "Win Percentage",
metric == "wb2" ~ "Win by 2+ Rate",
metric == "wb3" ~ "Win by 3+ Rate",
metric == "wb4" ~ "Win by 4+ Rate",
metric == "wb5" ~ "Win by 5+ Rate"),
metric = factor(metric, levels = c("Win Percentage", "Win by 2+ Rate", "Win by 3+ Rate",
"Win by 4+ Rate", "Win by 5+ Rate")),
val_lab = paste0(value * 100, "%"))
rec_teams = sort(unique(vis_df$team))
max_colors = c(team_color_codes[which(team_colors$team == rec_teams[1])],
team_color_codes[which(team_colors$team == rec_teams[2])],
team_color_codes[which(team_colors$team == rec_teams[3])])
vis_df |>
ggplot(aes(metric, value)) +
geom_col(aes(fill = team), position = "dodge") +
geom_text(aes(label = val_lab, group = team), size = 3, vjust = -0.5, position = position_dodge2(width = 0.9)) +
scale_fill_manual(values = max_colors) +
labs(x = NULL, y = "Rate", fill = NULL, title = "Top Team Win Rates",
subtitle = "Top Three Teams by Win Percentage Included") +
theme(axis.text.y = element_blank())
end_margins = end_games |>
mutate(home_margin = home_score - away_score,
away_margin = away_score - home_score)
get_margin = function(team) {
home_margins = pull(filter(end_margins, home_team == team), home_margin)
away_margins = pull(filter(end_margins, away_team == team), away_margin)
return(round(mean(c(home_margins, away_margins)), 3))
}
team_margins = data.frame(team = all_teams) |>
mutate(margin = sapply(team, get_margin))
team_margins |>
mutate(pos_lab = ifelse(margin >= 0, margin, ""),
neg_lab = ifelse(margin < 0, margin, "")) |>
ggplot(aes(reorder(team, margin), margin)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = pos_lab), size = 2.5, hjust = -0.25) +
geom_text(aes(label = neg_lab), size = 2.5, hjust = 1.25) +
coord_flip(ylim = c(-3.25, 3.25)) +
scale_fill_manual(values = team_color_codes) +
labs(y = "Average Margin", x = NULL, title = "Average Margins by Team")
end_winners = end_games |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(away_score > home_score, home_team, away_team),
margin = abs(home_score - away_score))
get_vmargin = function(team) {
wins = pull(filter(end_winners, win_team == team), margin)
return(round(mean(wins), 3))
}
get_dmargin = function(team) {
losses = pull(filter(end_winners, lose_team == team), margin)
return(-round(mean(losses), 3))
}
team_margins = data.frame(team = all_teams) |>
mutate(avg_margin = sapply(team, get_margin),
win_margin = sapply(team, get_vmargin),
def_margin = sapply(team, get_dmargin))
vmarg_mean = mean(team_margins$win_margin)
dmarg_mean = mean(team_margins$def_margin)
team_margins |>
mutate(wl_diff = win_margin - def_margin) |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(win_margin, def_margin)) +
geom_point(size = 4, aes(col = team), show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 4) +
geom_hline(yintercept = dmarg_mean, linetype = "dashed", alpha = 0.4) +
geom_vline(xintercept = vmarg_mean, linetype = "dashed", alpha = 0.4) +
scale_color_manual(values = team_color_codes) +
labs(x = "Avg. Margin of Victory", y = "Avg. Margin of Defeat",
title = "Scatterplot of Margins of Victory/Defeat",
subtitle = "Dashed lines represent league averages") +
annotate("text", x = 2.5, y = -5.1, label = "Win Small, Lose Big", fontface = "italic", alpha = 0.5) +
annotate("text", x = 4.75, y = -5.1, label = "Win Big, Lose Big", fontface = "italic", alpha = 0.5) +
annotate("text", x = 2.5, y = -2.1, label = "Win Small, Lose Small", fontface = "italic", alpha = 0.5) +
annotate("text", x = 4.75, y = -2.1, label = "Win Big, Lose Small", fontface = "italic", alpha = 0.5) +
coord_cartesian(xlim = c(min(team_margins$win_margin) - 0.25, max(team_margins$win_margin) + 0.25),
ylim = c(min(team_margins$def_margin) - 0.75, max(team_margins$def_margin) + 0.75)) +
scale_x_continuous(breaks = seq(-10, 10, by = 0.5)) + scale_y_continuous(breaks = seq(-10, 10, by = 0.5))
team_margins |>
mutate(marg_diff = abs(win_margin - def_margin)) |>
ggplot() +
geom_col(aes(reorder(team, marg_diff), win_margin, fill = team), show.legend = F) +
geom_col(aes(reorder(team, marg_diff), def_margin, fill = team), show.legend = F, alpha = 0.75) +
geom_text(aes(reorder(team, marg_diff), win_margin, label = round(win_margin, 2)), size = 2.5, hjust = -0.25) +
geom_text(aes(reorder(team, marg_diff), def_margin, label = round(def_margin, 2)), size = 2.5, hjust = 1.25) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(min(team_margins$def_margin) - 0.25, max(team_margins$win_margin) + 0.25)) +
labs(x = NULL, y = "← Avg. Margin of Defeat | Avg. Margin of Victory →",
title = "Team Margins of Victory and Defeat", subtitle = "Ordered by Largest to Smallest Range") +
theme(axis.text.x = element_blank())
one_runs = end_games |>
filter(abs(home_score - away_score) == 1) |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team),
home_win = ifelse(win_team == home_team, 1, 0))
or_wins = rename(count(one_runs, win_team), wins = n)
or_losses = rename(count(one_runs, lose_team), losses = n)
or_df = left_join(or_wins, or_losses, by = c("win_team" = "lose_team")) |>
mutate(gp = wins + losses,
win_per = round(wins / gp, 3)) |>
left_join(team_abbrevs, by = c("win_team" = "team"))
or_df |>
ggplot(aes(gp, win_per)) +
geom_point(aes(col = win_team), size = 4, show.legend = F) +
scale_color_manual(values = team_color_codes) +
ggrepel::geom_text_repel(aes(label = abb)) +
geom_hline(aes(yintercept = mean(or_df$win_per)), linetype = "dashed", alpha = 0.5) +
geom_vline(aes(xintercept = mean(or_df$gp)), linetype = "dashed", alpha = 0.5) +
labs(x = "One-Run Games Played", y = "Win Percentage in One-Run Games",
title = "How are MLB teams performing in one-run games?")
last_game_date = end_games |> slice_max(date, n = 1) |> sample_n(1) |> pull(date)
get_date_pks = function(fdate) {
df = mlb_game_pks(date = fdate) |>
select(game_pk, date = officialDate, away_team = teams.away.team.name, home_team = teams.home.team.name) |>
mutate(date = as_date(date))
return(df)
}
all_game_pks = data.frame(game_pk = NULL, date = NULL, away_team = NULL, home_team = NULL)
for (i in 1:length(loop_dates)) {
df = get_date_pks(loop_dates[i])
all_game_pks = rbind(all_game_pks, df)
}
max_home_team = end_games |>
filter(date == Sys.Date() - 1) |>
mutate(total_score = home_score + away_score) |>
slice_max(total_score, n = 1) |>
pull(home_team)
max_pk = all_game_pks |>
filter(date == Sys.Date() - 1) |>
filter(home_team == max_home_team) |>
pull(game_pk)
vis_df = mlb_pbp(game_pk = max_pk) |>
filter(count.outs.end == 3) |>
select(inning = about.inning, away_team, away_score = result.awayScore, home_score = result.homeScore, home_team) |>
pivot_longer(c(home_score, away_score), names_to = "team", values_to = "score") |>
mutate(team = ifelse(team == "home_score", home_team, away_team)) |>
group_by(inning, team) |>
slice_max(score, n = 1)
max_teams = sort(unique(vis_df$team))
max_colors = c(team_color_codes[which(team_colors$team == max_teams[1])],
team_color_codes[which(team_colors$team == max_teams[2])])
high_df = end_games |>
filter(date == Sys.Date() - 1) |>
mutate(total_score = home_score + away_score,
win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team),
win_score = ifelse(home_score > away_score, home_score, away_score),
lose_score = ifelse(home_score > away_score, away_score, home_score)) |>
slice_max(total_score, n = 1)
high_lab = paste0(high_df$win_team, " def. ", high_df$lose_team, " ", high_df$win_score, "-", high_df$lose_score)
vis_df |>
ggplot(aes(inning, score)) +
geom_line(aes(col = team), linewidth = 2) +
scale_x_continuous(breaks = 1:25) +
scale_y_continuous(breaks = 1:25) +
scale_color_manual(values = max_colors) +
labs(x = "Inning", y = "Score", col = NULL, subtitle = high_lab,
title = "Scoring Trends for Yesterday's Highest-Scoring Game")
this_month = as.character(month(Sys.Date(), label = T, abbr = F))
this_month_end_games = end_games |>
filter(month(date, label = T, abbr = F) == this_month) |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team),
win_score = ifelse(home_score > away_score, home_score, away_score),
lose_score = ifelse(home_score > away_score, away_score, home_score))
this_month_records = this_month_end_games |>
count(win_team) |>
rename(team = win_team, wins = n) |>
full_join(count(this_month_end_games, lose_team), by = c("team" = "lose_team")) |>
rename(losses = n) |>
mutate(wins = replace_na(wins, 0),
losses = replace_na(losses, 0),
pct = round(wins / (wins + losses), 3),
record = paste0(wins, "-", losses)) |>
arrange(team)
this_month_records |>
ggplot(aes(reorder(team, pct), pct)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = record), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 1)) +
labs(x = NULL, y = "Win Percentage", title = paste0("Best Records This Month (", this_month, ")")) +
theme(axis.text.x = element_blank())
get_month_rspg = function(team) {
home_scores = pull(filter(this_month_end_games, home_team == team), home_score)
away_scores = pull(filter(this_month_end_games, away_team == team), away_score)
return(sum(c(home_scores, away_scores)))
}
get_month_rapg = function(team) {
home_scores = pull(filter(this_month_end_games, home_team == team), away_score)
away_scores = pull(filter(this_month_end_games, away_team == team), home_score)
return(sum(c(home_scores, away_scores)))
}
this_month_scored_allowed = data.frame(team = all_teams) |>
mutate(scored = sapply(team, get_month_rspg),
allowed = sapply(team, get_month_rapg),
diff = scored - allowed)
this_month_scored_allowed |>
ggplot(aes(reorder(team, scored), scored)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = scored), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip() +
labs(x = NULL, y = "Runs Scored", title = paste0("Most Runs Scored This Month (", this_month, ")")) +
theme(axis.text.x = element_blank())
this_month_scored_allowed |>
ggplot(aes(reorder(team, allowed), allowed)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = allowed), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip() +
labs(x = NULL, y = "Runs Allowed", title = paste0("Most Runs Allowed This Month (", this_month, ")")) +
theme(axis.text.x = element_blank())
end_wl = end_games |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team),
home_win = ifelse(home_score > away_score, 1, 0),
home_loss = ifelse(home_score > away_score, 0, 1),
away_win = ifelse(home_score > away_score, 0, 1),
away_loss = ifelse(home_score > away_score, 1, 0))
home_away_records = end_wl |>
group_by(team = home_team) |>
summarise(wins = sum(home_win),
losses = sum(home_loss)) |>
mutate(win_pct = round(wins / (wins + losses), 3),
record = paste0(wins, "-", losses)) |>
arrange(desc(win_pct)) |>
select(team, home_win_pct = win_pct, home_record = record) |>
left_join(end_wl |>
group_by(team = away_team) |>
summarise(wins = sum(away_win),
losses = sum(away_loss)) |>
mutate(win_pct = round(wins / (wins + losses), 3),
record = paste0(wins, "-", losses)) |>
arrange(desc(win_pct)) |>
select(team, away_win_pct = win_pct, away_record = record), by = "team")
home_away_records |>
ggplot(aes(reorder(team, home_win_pct), home_win_pct)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = home_record), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 0.8)) +
labs(x = NULL, y = "Home Win Percentage", title = "Best Home Records") +
theme(axis.text.x = element_blank())
home_away_records |>
ggplot(aes(reorder(team, away_win_pct), away_win_pct)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = away_record), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 0.8)) +
labs(x = NULL, y = "Away Win Percentage", title = "Best Away Records") +
theme(axis.text.x = element_blank())
get_n_games_month = function(team) {
return(end_games |> filter(month(date) == month(Sys.Date()) & (home_team == team | away_team == team)) |> nrow())
}
msas = this_month_scored_allowed |>
mutate(n_games = sapply(team, get_n_games_month),
rspg = scored / n_games, rapg = allowed / n_games) |>
left_join(team_abbrevs, by = "team")
mean_s = mean(msas$rspg)
mean_a = mean(msas$rapg)
msas |>
ggplot(aes(rspg, rapg)) +
geom_point(aes(col = team), show.legend = F, size = 4) +
ggrepel::geom_text_repel(aes(label = abb)) +
scale_color_manual(values = team_color_codes) +
geom_vline(xintercept = mean_s, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = mean_a, linetype = "dashed", alpha = 0.5) +
scale_x_continuous(breaks = seq(0, 10, by = 1)) +
scale_y_continuous(breaks = seq(0, 10, by = 1)) +
labs(x = "Runs Scored Per Game", y = "Runs Allowed Per Game",
title = paste0("Scatterplot of Runs Scored v. Runs Allowed This Month (", this_month, ")"),
subtitle = paste0("League Averages: ", round(mean_s, 2), " Runs Scored / ",
round(mean_a, 2), " Runs Allowed"))
pks_with_scored_first = read_csv("first_score_winners.csv", col_types = cols())
bad_pks = c(718700, 718558, 718371, 717664, 717579)
who_scored_first = function(fpk) {
return(mlb_pbp(fpk) |>
filter(isPitch & about.isScoringPlay) |>
mutate(startTime = as_datetime(startTime)) |>
arrange(startTime) |>
head(1) |>
pull(batting_team))
}
all_game_pks |>
filter(!game_pk %in% bad_pks & date < Sys.Date() & !game_pk %in% pks_with_scored_first$game_pk)
new_first_scores = all_game_pks |>
filter(!game_pk %in% bad_pks & date < Sys.Date() & !game_pk %in% pks_with_scored_first$game_pk) |>
mutate(first_score = sapply(game_pk, who_scored_first))
new_first_scores
pks_with_scored_first = rbind(pks_with_scored_first, new_first_scores)
pks_with_scored_first
write_csv(pks_with_scored_first, "first_score_winners.csv")
pks_with_scored_first = read_csv("first_score_winners.csv", col_types = cols())
bad_pks = c(718700, 718558, 718371, 717664, 717579)
who_scored_first = function(fpk) {
return(mlb_pbp(fpk) |>
filter(isPitch & about.isScoringPlay) |>
mutate(startTime = as_datetime(startTime)) |>
arrange(startTime) |>
head(1) |>
pull(batting_team))
}
new_first_scores = all_game_pks |>
filter(!game_pk %in% bad_pks & date < Sys.Date() & !game_pk %in% pks_with_scored_first$game_pk) |>
mutate(first_score = sapply(game_pk, who_scored_first))
pks_with_scored_first = rbind(pks_with_scored_first, new_first_scores)
write_csv(pks_with_scored_first, "first_score_winners.csv")
scored_first_records = pks_with_scored_first |>
mutate(loser = ifelse(first_score == home_team, away_team, home_team)) |>
count(loser) |>
rename(team = loser, losses = n) |>
left_join(pks_with_scored_first |>
count(first_score) |>
rename(team = first_score, wins = n), by = "team") |>
select(team, wins, losses) |>
mutate(win_pct = round(wins / (wins + losses), 3),
record = paste0(wins, "-", losses))
scored_first_records |>
select(team, fs_pct = win_pct) |>
left_join(team_records, by = "team") |>
select(team, win_pct, fs_pct) |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(win_pct, fs_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 4) +
scale_color_manual(values = team_color_codes) +
geom_abline(linetype = "dashed", alpha = 0.5) +
labs(x = "Win Percentage", y = "Win Percentage if First Score Won",
title = "What if MLB games were sudden death?",
subtitle = "Teams above/left of the dashed line would benefit",
caption = "First Score Data as of 9 July 2023") +
scale_x_continuous(breaks = seq(0, 1, by = 0.05)) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05))
scored_first_records |>
select(team, fs_pct = win_pct) |>
left_join(team_records, by = "team") |>
select(team, win_pct, fs_pct) |>
left_join(team_abbrevs, by = "team") |>
ggplot(aes(win_pct, fs_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 4) +
scale_color_manual(values = team_color_codes) +
geom_abline(linetype = "dashed", alpha = 0.5) +
labs(x = "Win Percentage", y = "Win Percentage if First Score Won",
title = "What if MLB games were sudden death?",
subtitle = "Teams above/left of the dashed line would benefit") +
scale_x_continuous(breaks = seq(0, 1, by = 0.05)) +
scale_y_continuous(breaks = seq(0, 1, by = 0.05))
setwd("~/r_projects/mlb_cpr")
