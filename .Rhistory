group_by(team) |>
summarise(hrs = sum(hrs)), by = "team")
cor_lab = round(cor(cor_df$ks, cor_df$hrs), 3)
all_ks |>
group_by(team) |>
summarise(ks = sum(ks)) |>
inner_join(all_homers |>
group_by(team) |>
summarise(hrs = sum(hrs)), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(hrs, ks)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
labs(x = "Home Runs", y = "Strikeouts",
title = "Scatterplot of Home Runs and Strikeouts by Team",
subtitle = paste0("Correlation: ", cor_lab)) +
scale_x_continuous(breaks = seq(0, 500, by = 10)) +
scale_y_continuous(breaks = seq(0, 2500, by = 50))
get_team_wl_homers = function(f_team) {
team_homers = all_homers |>
filter(team == f_team) |>
select(-team)
win_homers = all_game_pks |>
inner_join(end_games, by = c("date", "away_team", "home_team")) |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team)) |>
filter(win_team == f_team) |>
left_join(team_homers, by = "game_pk") |>
summarise(homers = sum(hrs, na.rm = T),
n = n())
loss_homers = all_game_pks |>
inner_join(end_games, by = c("date", "away_team", "home_team")) |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team)) |>
filter(lose_team == f_team) |>
left_join(team_homers, by = "game_pk") |>
summarise(homers = sum(hrs, na.rm = T),
n = n())
win_hr = round(win_homers$homers / win_homers$n, 3)
loss_hr = round(loss_homers$homers / loss_homers$n, 3)
return(data.frame(team = f_team, win_hr = win_hr, loss_hr = loss_hr))
}
team_wl_homers = data.frame(team = NULL, win_hr = NULL, loss_hr = NULL)
for (i in 1:length(all_teams)) {
team_wl_homers = rbind(team_wl_homers, get_team_wl_homers(all_teams[i]))
}
cor_lab = round(cor(team_wl_homers$win_hr, team_wl_homers$loss_hr), 3)
team_wl_homers |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(win_hr, loss_hr)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
labs(x = "Average HRs in Wins", y = "Average HRs in Losses",
title = "Scatterplot of Average HRs in Wins and Losses by Team",
subtitle = paste0("Correlation: ", cor_lab)) +
scale_x_continuous(breaks = seq(0, 5, by = 0.1)) +
scale_y_continuous(breaks = seq(0, 5, by = 0.1))
runs_scored_thirds = read_csv("runs_scored_thirds.csv", col_types = cols())
full_pks = all_game_pks |>
filter(date < Sys.Date() & !game_pk %in% bad_pks) |>
pull(game_pk)
full_pks = full_pks[!full_pks %in% runs_scored_thirds$game_pk]
# runs_scored_thirds = data.frame()
if (length(full_pks) > 0) {
for (i in 1:length(full_pks)) {
loop_data = mlb_pbp(full_pks[i]) |>
mutate(game_third = case_when(about.inning <= 3 ~ "Innings 1-3",
about.inning >= 4 & about.inning <= 6 ~ "Innings 4-6",
about.inning >= 7 ~ "Innings 7+"),
game_date = as_date(game_date)) |>
distinct(game_pk, date = game_date, about.inning,
result = result.description, game_third, batting_team) |>
filter(str_detect(result, "scores") | str_detect(result, "homers")) |>
mutate(runs = str_count(result, "scores") + str_count(result, "homers")) |>
group_by(game_pk, date, batting_team, game_third) |>
summarise(runs = sum(runs),
.groups = "drop")
runs_scored_thirds = rbind(runs_scored_thirds, loop_data)
if (i %% 25 == 0) print(paste0(round(i / length(full_pks) * 100, 2), "%"))
}
}
write_csv(runs_scored_thirds, "runs_scored_thirds.csv")
runs_scored_thirds |>
group_by(batting_team, game_third) |>
summarise(runs = sum(runs),
.groups = "drop") |>
group_by(batting_team) |>
mutate(pct = round(runs / sum(runs), 3)) |>
inner_join(team_abbrevs, by = c("batting_team" = "team")) |>
ggplot(aes(game_third, pct)) +
geom_point(aes(col = batting_team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5, alpha = 0.25, max.overlaps = 30) +
scale_color_manual(values = team_color_codes) +
scale_y_continuous(breaks = seq(0, 1, by = 0.02), labels = scales::percent) +
labs(x = NULL, y = "Percent of Total Runs Scored",
title = "When are teams scoring their runs?")
# runs_scored_thirds |>
#   mutate(start_finish = ifelse(game_third == "Innings 7+", "finish", "start")) |>
#   group_by(batting_team, start_finish) |>
#   summarise(runs = sum(runs),
#             .groups = "drop") |>
#   pivot_wider(batting_team, names_from = "start_finish", values_from = "runs") |>
#   inner_join(team_abbrevs, by = c("batting_team" = "team")) |>
#   ggplot(aes(start, finish)) +
#   geom_point(aes(col = batting_team), size = 4, show.legend = F) +
#   ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
#   scale_color_manual(values = team_color_codes) +
#   geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
#   labs(x = "Runs before 7th inning", y = "Runs in 7th inning or later",
#        title = "Who is scoring more runs at the end of the game?")
end_games
end_games |>
mutate(diff = abs(home_score - away_score))
game_diffs = end_games |>
mutate(diff = abs(home_score - away_score))
game_diffs = end_games |>
mutate(diff = abs(home_score - away_score))
get_avg_diff = function(team) {
home_diff = game_diffs |> filter(home_team == team) |> pull(diff)
away_diff = game_diffs |> filter(away_team == team) |> pull(diff)
return(round(mean(c(home_diff, away_diff)), 2))
}
get_avg_diff("Chicago Cubs")
game_diffs = end_games |>
mutate(diff = abs(home_score - away_score))
get_avg_diff = function(team) {
home_diff = game_diffs |> filter(home_team == team) |> pull(diff)
away_diff = game_diffs |> filter(away_team == team) |> pull(diff)
return(round(mean(c(home_diff, away_diff)), 3))
}
get_avg_diff("Chicago Cubs")
data.frame(team = all_teams)
game_diffs = end_games |>
mutate(diff = abs(home_score - away_score))
get_avg_diff = function(team) {
home_diff = game_diffs |> filter(home_team == team) |> pull(diff)
away_diff = game_diffs |> filter(away_team == team) |> pull(diff)
return(round(mean(c(home_diff, away_diff)), 3))
}
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
arrange(desc(diff))
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
arrange(desc(avg_diff))
game_diffs = end_games |>
mutate(diff = abs(home_score - away_score))
get_avg_diff = function(team) {
home_diff = game_diffs |> filter(home_team == team) |> pull(diff)
away_diff = game_diffs |> filter(away_team == team) |> pull(diff)
return(round(mean(c(home_diff, away_diff)), 3))
}
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
arrange(desc(avg_diff))
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
arrange(avg_diff)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(team, avg_diff))
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(team, avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
scale_fill_manual(values = team_color_codes)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
scale_fill_manual(values = team_color_codes)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
scale_fill_manual(values = team_color_codes) +
coord_flip()
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = 0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip()
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip()
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 5))
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5))
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5)) +
labs(x = NULL, y = "Average Run Differential")
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), -avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5)) +
labs(x = NULL, y = "Average Run Differential")
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, -avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5)) +
labs(x = NULL, y = "Average Run Differential")
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5)) +
labs(x = NULL, y = "Average Run Differential")
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5)) +
labs(x = NULL, y = "Average Run Differential") +
scale_y_continuous(breaks = seq(0, 10, by = 0.25))
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5)) +
labs(x = NULL, y = "Average Run Differential") +
scale_y_continuous(breaks = seq(0, 10, by = 0.5))
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5)) +
labs(x = NULL, y = "Average Run Differential") +
theme(axis.text.x = element_blank())
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5)) +
labs(x = NULL, y = "Average Run Differential",
title = "On average, which team's games are closest?") +
theme(axis.text.x = element_blank())
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff))
team_records
team_records |>
select(team, win_pct)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
inner_join(team_records |>
select(team, win_pct), by = "team")
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
ggplot(aes(avg_diff, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(avg_diff, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
geom_text(aes(label = abb), size = 3)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(avg_diff, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(avg_diff, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(avg_diff, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
scale_color_manual(values = team_color_codes)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(avg_diff, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5)) +
labs(x = NULL, y = "Average Run Differential",
title = "On average, which team's games are closest?") +
theme(axis.text.x = element_blank())
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(avg_diff, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5)
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(avg_diff, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
labs(x = "Average Run Differential", y = "Win Percentage",
title = "Scatterplot of Win Percentage by Run Differential")
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
inner_join(team_records |>
select(team, win_pct), by = "team") |>
inner_join(team_abbrevs, by = "team") |>
ggplot(aes(avg_diff, win_pct)) +
geom_point(aes(col = team), size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = abb), size = 3.5) +
scale_color_manual(values = team_color_codes) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed", alpha = 0.5) +
labs(x = "Average Run Differential", y = "Win Percentage",
title = "Scatterplot of Win Percentage by Average Run Differential")
data.frame(team = all_teams) |>
mutate(avg_diff = sapply(team, get_avg_diff)) |>
ggplot(aes(reorder(team, avg_diff), avg_diff)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = avg_diff), size = 3, hjust = -0.25) +
scale_fill_manual(values = team_color_codes) +
coord_flip(ylim = c(0, 4.5)) +
labs(x = NULL, y = "Average Run Differential",
title = "On average, which team's games are closest?") +
theme(axis.text.x = element_blank())
setwd("~/r_projects/mlb_cpr")
library(tidyverse)
library(lubridate)
library(magrittr)
past.solutions = read.table("all_wordle_solutions.txt") |>
set_colnames(c("month", "day", "year", "x", "day_num", "word")) |>
mutate(word = str_to_lower(word)) |>
mutate(month = case_when(month == "Jan" ~ 1, month == "Feb" ~ 2, month == "Mar" ~ 3,
month == "Apr" ~ 4, month == "May" ~ 5, month == "Jun" ~ 6,
month == "Jul" ~ 7, month == "Aug" ~ 8, month == "Sep" ~ 9,
month == "Oct" ~ 10, month == "Nov" ~ 11, month == "Dec" ~ 12),
date = mdy(paste(month, day, year, sep = "-"))) |>
filter(date <= Sys.Date() - 1) |>
pull(word)
df = data.frame(scan("wordle_answers.txt", character(), quote = "")) |>
set_colnames("word") |>
mutate(one = substr(word, 1, 1),
two = substr(word, 2, 2),
three = substr(word, 3, 3),
four = substr(word, 4, 4),
five = substr(word, 5, 5)) |>
filter(!word %in% past.solutions)
alphabet = c("a", "b", "c", "d", "e",
"f", "g", "h", "i", "j",
"k", "l", "m", "n", "o",
"p", "q", "r", "s", "t",
"u", "v", "w", "x", "y", "z")
no_raw = c("stare")
no = rep(NA, nchar(no_raw))
for (i in 1:nchar(no_raw)) no[i] = substr(no_raw, i, i)
# yes_raw = c("")
# yes = rep(NA, nchar(yes_raw))
# for (i in 1:nchar(yes_raw)) yes[i] = substr(yes_raw, i, i)
# for (i in 1:length(yes)) df = filter(df, str_detect(word, yes[i]))
df = filter(df, !one %in% no, !two %in% no, !three %in% no, !four %in% no, !five %in% no)
words = pull(df, word)
paste("possible words:", length(words))
paste("random word:", sample(words, 1))
"-----------------------------------"
non.repeats = df |>
filter(one != two & one != three & one != four & one != five,
two != three & two != four & two != five,
three != four & three != five, four != five) |>
pull(word)
paste("possible non-repeating words:", length(non.repeats))
if (length(non.repeats) > 0) {
paste("random non-repeating word:", sample(non.repeats, 1))
} else {
print("no non-repeating words")
}
no_raw = c("starejmbo")
no = rep(NA, nchar(no_raw))
for (i in 1:nchar(no_raw)) no[i] = substr(no_raw, i, i)
# yes_raw = c("")
# yes = rep(NA, nchar(yes_raw))
# for (i in 1:nchar(yes_raw)) yes[i] = substr(yes_raw, i, i)
# for (i in 1:length(yes)) df = filter(df, str_detect(word, yes[i]))
df = filter(df, !one %in% no, !two %in% no, !three %in% no, !four %in% no, !five %in% no) |>
filter(two == "u")
words = pull(df, word)
paste("possible words:", length(words))
paste("random word:", sample(words, 1))
"-----------------------------------"
non.repeats = df |>
filter(one != two & one != three & one != four & one != five,
two != three & two != four & two != five,
three != four & three != five, four != five) |>
pull(word)
paste("possible non-repeating words:", length(non.repeats))
if (length(non.repeats) > 0) {
paste("random non-repeating word:", sample(non.repeats, 1))
} else {
print("no non-repeating words")
}
no_raw = c("starejmbopnh")
no = rep(NA, nchar(no_raw))
for (i in 1:nchar(no_raw)) no[i] = substr(no_raw, i, i)
# yes_raw = c("")
# yes = rep(NA, nchar(yes_raw))
# for (i in 1:nchar(yes_raw)) yes[i] = substr(yes_raw, i, i)
# for (i in 1:length(yes)) df = filter(df, str_detect(word, yes[i]))
df = filter(df, !one %in% no, !two %in% no, !three %in% no, !four %in% no, !five %in% no) |>
filter(two == "u")
words = pull(df, word)
paste("possible words:", length(words))
paste("random word:", sample(words, 1))
"-----------------------------------"
non.repeats = df |>
filter(one != two & one != three & one != four & one != five,
two != three & two != four & two != five,
three != four & three != five, four != five) |>
pull(word)
paste("possible non-repeating words:", length(non.repeats))
if (length(non.repeats) > 0) {
paste("random non-repeating word:", sample(non.repeats, 1))
} else {
print("no non-repeating words")
}
no_raw = c("starejmbopnhld")
no = rep(NA, nchar(no_raw))
for (i in 1:nchar(no_raw)) no[i] = substr(no_raw, i, i)
# yes_raw = c("")
# yes = rep(NA, nchar(yes_raw))
# for (i in 1:nchar(yes_raw)) yes[i] = substr(yes_raw, i, i)
# for (i in 1:length(yes)) df = filter(df, str_detect(word, yes[i]))
df = filter(df, !one %in% no, !two %in% no, !three %in% no, !four %in% no, !five %in% no) |>
filter(two == "u")
words = pull(df, word)
paste("possible words:", length(words))
paste("random word:", sample(words, 1))
"-----------------------------------"
non.repeats = df |>
filter(one != two & one != three & one != four & one != five,
two != three & two != four & two != five,
three != four & three != five, four != five) |>
pull(word)
paste("possible non-repeating words:", length(non.repeats))
if (length(non.repeats) > 0) {
paste("random non-repeating word:", sample(non.repeats, 1))
} else {
print("no non-repeating words")
}
